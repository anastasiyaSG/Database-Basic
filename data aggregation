Lecture:

1.
SELECT job_title, count(employee_id) 
FROM employees
GROUP BY job_title;

2.
SELECT department_id, SUM(salary) as 'TOTAL SALARY'
FROM employees
GROUP BY job_title;

3.
SELECT department_id, AVG(salary) as 'TOTAL SALARY'
FROM employees
GROUP BY department_id;

4.
SELECT department_id, min(salary) as 'MIN'
FROM employees
GROUP BY department_id;

5.
SELECT department_id, count(salary) as 'Count'
FROM employees
GROUP BY department_id;

6.
SELECT department_id, salary,AVG(salary) as 'TotalSum'
FROM employees
GROUP BY department_id
HAVING TotalSum<250000;

Lab:

1.
SELECT department_id, count(employee_id) as 'Number of employees'
FROM employees
GROUP BY department_id
ORDER BY department_id , count(employee_id);


2.
SELECT department_id, round(AVG(salary)) as 'Average Salary'
FROM employees
GROUP BY department_id
ORDER BY department_id ;

3.
SELECT department_id, round(MIN(salary)) as 'MinSalary'
FROM employees
GROUP BY department_id
HAVING MinSalary >800
ORDER BY MinSalary;

5.
SELECT department_id, round(AVG(salary)) as 'AverageSalary',
round(min(salary)) as 'Min Salary',
round(max(salary)) as 'Max Salary'
FROM employees
GROUP BY department_id
ORDER BY AverageSalary;

Exercises:

1.
SELECT  count(Id) as 
'total' FROM wizzarddeposits  ;

2.
SELECT  max(MagicWandSize) as 
'longest_magic_wand' FROM wizzarddeposits  ;

3.
SELECT  DepositGroup,max(MagicWandSize) as 
'longest_magic_wand' FROM wizzarddeposits  
GROUP BY DepositGroup
ORDER BY longest_magic_wand;

4.
SELECT  DepositGroup FROM wizzarddeposits  
GROUP BY DepositGroup
ORDER BY (AVG(MagicWandSize));

5.
SELECT  DepositGroup, sum(DepositAmount) as 'total_sum' FROM wizzarddeposits  
GROUP BY DepositGroup
ORDER BY total_sum;

6.
SELECT DepositGroup, SUM(DepositAmount) as 'total_sum' FROM wizzarddeposits
WHERE MagicWandCreator = 'Ollivander family'
GROUP BY DepositGroup
ORDER BY DepositGroup;

7.
SELECT DepositGroup, SUM(DepositAmount) as 'total_sum' FROM wizzarddeposits
WHERE MagicWandCreator = 'Ollivander family'
GROUP BY DepositGroup
HAVING total_sum<150000
ORDER BY DepositGroup;


8.
SELECT DepositGroup, MagicWandCreator,min(DepositCharge) as 'min' FROM wizzarddeposits

GROUP BY DepositGroup, MagicWandCreator
ORDER BY MagicWandCreator,DepositGroup;


9.
SELECT CASE
           WHEN w.Age BETWEEN 0 AND 10
           THEN '[0-10]'
           WHEN w.Age BETWEEN 11 AND 20
           THEN '[11-20]'
           WHEN w.Age BETWEEN 21 AND 30
           THEN '[21-30]'
           WHEN w.Age BETWEEN 31 AND 40
           THEN '[31-40]'
           WHEN w.Age BETWEEN 41 AND 50
           THEN '[41-50]'
           WHEN w.Age BETWEEN 51 AND 60
           THEN '[51-60]'
           WHEN w.Age >= 61
           THEN '[61+]'
           ELSE 'N\A'
       END AS AgeGroup,
       COUNT(*) AS WizzardsCount
FROM WizzardDeposits AS w
GROUP BY CASE
             WHEN w.Age BETWEEN 0 AND 10
             THEN '[0-10]'
             WHEN w.Age BETWEEN 11 AND 20
             THEN '[11-20]'
             WHEN w.Age BETWEEN 21 AND 30
             THEN '[21-30]'
             WHEN w.Age BETWEEN 31 AND 40
             THEN '[31-40]'
             WHEN w.Age BETWEEN 41 AND 50
             THEN '[41-50]'
             WHEN w.Age BETWEEN 51 AND 60
             THEN '[51-60]'
             WHEN w.Age >= 61
             THEN '[61+]'
             ELSE 'N\A'
         END
         ORDER BY AgeGroup;

10.
SELECT LEFT(FirstName, 1) AS FirstLetter
FROM WizzardDeposits
WHERE DepositGroup = 'Troll Chest'
GROUP BY LEFT(FirstName, 1)
ORDER BY FirstLetter; 

11.
SELECT DepositGroup,
       IsDepositExpired,
       AVG(1.0 * DepositInterest)
FROM WizzardDeposits
WHERE DepositStartDate > '1985-01-01'
GROUP BY DepositGroup,
         IsDepositExpired
ORDER BY DepositGroup DESC,
         IsDepositExpired; 

12.

???????????????????????????????????????
SELECT SUM(ws.Difference)
FROM
(
    SELECT DepositAmount -
    (
        SELECT DepositAmount
        FROM WizzardDeposits AS wsd
        WHERE wsd.Id = wd.Id + 1
    ) AS Difference
    FROM WizzardDeposits AS wd
) AS ws; 
	
-- LEAD Solution

SELECT SUM(WizardDep.Difference)
FROM
(
    SELECT FirstName,
           DepositAmount,
           LEAD(FirstName) OVER(ORDER BY Id) AS GuestWizard,
           LAG(FirstName) OVER(ORDER BY Id) AS GuestLagWizard,
           LEAD(DepositAmount) OVER(ORDER BY Id) AS GuestDeposit,
           LAG(DepositAmount) OVER(ORDER BY Id) AS GuestLagDeposit,
           DepositAmount - LEAD(DepositAmount) OVER(ORDER BY Id) AS Difference
		   --DepositAmount - LAG(DepositAmount) OVER (ORDER BY Id) AS Difference -- is same calculation BUT NEGATIVE

    FROM WizzardDeposits
) AS WizardDep;
?????????????????

13.
SELECT department_id, min(salary) as minimum_salary
FROM employees
WHERE department_id =2 or department_id =5 or department_id =7 and hire_date>'2000-01-01'
GROUP BY department_id;

14.
SELECT *
INTO NewTable
FROM Employees
WHERE Salary > 30000;

DELETE FROM NewTable
WHERE ManagerID = 42;

UPDATE NewTable
  SET
      Salary += 5000
WHERE DepartmentID = 1;

SELECT DepartmentID,
       AVG(Salary)
FROM NewTable
GROUP BY DepartmentID; 
 
 -- DROP TABLE NewTable
/* One query - but judge wants a new table
SELECT DepartmentID,
       AVG(CASE
               WHEN DepartmentID % 2 != 0
               THEN Salary + 5000
               ELSE Salary
           END) AS AverageSalary
FROM Employees
WHERE Salary > 30000
      AND ManagerID != 42
GROUP BY DepartmentID;
*/

15.
SELECT department_id, max(salary) as maximum_salary
FROM employees

GROUP BY department_id
HAVING maximum_salary NOT BETWEEN 30000 AND 70000;

16.
SELECT COUNT(Salary)
FROM Employees
WHERE ManagerID IS NULL; 

17.
????????????????????????
SELECT salaries.department_id,
       salaries.salary
FROM
(
    SELECT department_id,
           salary, 
		 --DENSE_RANK() OVER(ORDER BY salary DESC) AS Rank
           DENSE_RANK() OVER(PARTITION BY department_id ORDER BY salary DESC) AS Rank
    FROM employees
    GROUP BY department_id,
             salary
) AS salaries
WHERE Rank = 3
GROUP BY salaries.department_id,
         salaries.salary;
??????????????????????????

18.

SELECT first_name, last_name, department_id FROM employees AS e
WHERE salary >
(
    SELECT AVG(salary)
    FROM employees AS em
    WHERE e.Department_id = em.Department_id
)
ORDER BY department_id;

19.
SELECT department_id, sum(salary) as total_salary
FROM employees
GROUP BY department_id
ORDER BY department_id;
 
