Database Programmability LAB & Lecture:

1.Count Employees by Town


CREATE FUNCTION ufn_count_employees_by_town(town_name VARCHAR(20))
RETURNS INT
RETURN (
		SELECT COUNT(e.employee_id) 
		FROM `employees` AS e
			JOIN `addresses` AS a ON a.address_id = e.address_id
			JOIN `towns` AS t ON t.town_id = a.town_id
        WHERE t.name = town_name
);

-- Demo
SELECT ufn_count_employees_by_town('Sofia') AS 'count';

-- Cleanup
DROP FUNCTION IF EXISTS ufn_count_employees_by_town;


2.

DELIMITER $$
CREATE PROCEDURE usp_select_employees_by_seniority() 
BEGIN
  SELECT * 
  FROM employees
  WHERE ROUND((DATEDIFF(NOW(), hire_date) / 365.25)) < 15;
END $$
---------
CALL usp_select_employees_by_seniority();
-------
DROP PROCEDURE usp_select_employees_by_seniority;
------------
CREATE PROCEDURE usp_procedure_name 
(parameter_1_name parameter_type,
parameter_2_name parameter_type,â€¦)

3.

DELIMITER $$
CREATE PROCEDURE usp_select_employees_by_seniority2(min_years_at_work INT)
BEGIN
  SELECT first_name, last_name, hire_date,
    ROUND(DATEDIFF(NOW(),DATE(hire_date)) / 365.25,0) AS 'years'
  FROM employees
  WHERE ROUND(DATEDIFF(NOW(),DATE(hire_date)) / 365.25,0) > min_years_at_work
  ORDER BY hire_date;
END $$

CALL usp_select_employees_by_seniority2(15);

4.

CREATE PROCEDURE usp_add_numbers
(first_number INT,
second_number INT,
   OUT result INT)
BEGIN
   SET result = first_number + second_number
END $$
DELIMITER ;
SET @answer=0;
CALL usp_add_numbers(5, 6,@answer);
SELECT @answer;
-- 11

5.Employees Promotion:

DELIMITER $$
CREATE PROCEDURE usp_raise_salary_by_id(id INT(10))
BEGIN
	UPDATE `employees` AS e
    SET e.salary = e.salary * 1.05
    WHERE e.employee_id = id;
END $$
DELIMITER ;
CALL usp_raise_salary_by_id(1);
-----
with transaction:
-----
DELIMITER $$
CREATE PROCEDURE usp_raise_salary_by_id_transaction(id INT(10))
BEGIN
	START TRANSACTION;
    IF((SELECT COUNT(e.employee_id) 
		FROM `employees` as e 
		WHERE e.employee_id LIKE id)<>1) 
		THEN ROLLBACK;
    ELSE
		UPDATE `employees` AS e
		SET e.salary = e.salary * 1.05
		WHERE e.employee_id = id;
	END IF;
END $$
DELIMITER ;
call usp_raise_salary_by_id_transaction(3);

6. Triggers:

CREATE TABLE deleted_employees(
	`employee_id` INT PRIMARY KEY AUTO_INCREMENT,
    `first_name` VARCHAR(20),
    `last_name` VARCHAR(20),
    `middle_name` VARCHAR(20),
    `job_title` VARCHAR(50),
    `department_id` INT,
    `salary` DOUBLE
);

DELIMITER $$
CREATE TRIGGER tr_deleted_employees
AFTER DELETE ON `employees`
FOR EACH ROW
BEGIN
	INSERT INTO `deleted_employees` 
		(`first_name`, `last_name`, `middle_name`, 
			`job_title`, `department_id`, `salary`)
    VALUES (OLD.first_name, OLD.last_name, OLD.middle_name, 
		OLD.job_title, OLD.department_id, OLD.salary);
END $$
DELIMITER ;
