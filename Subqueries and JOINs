Subqueries and JOINs 
Lab:

1. Managers

SELECT e.employee_id, concat(first_name," ",last_name) as `full_name`
,d.department_id, d.name
FROM employees as e
RIGHT JOIN departments as d
ON d.manager_id = e.employee_id
ORDER BY employee_id
LIMIT 5;

2. Towns Adresses 

 SELECT a.town_id,name_town,a.address_text
FROM addresses as a
JOIN towns as t
on a.town_id = t.town_id
WHERE t.name_town in('San Francisco',
 'Sofia','Carnation')
 ORDER BY t.town_id, a.address_id;

3. Employees Without Managers

SELECT 
    e.employee_id,
    e.first_name,
    e.last_name,
    e.department_id,
    e.salary
FROM
    `employees` AS e
WHERE
    ISNULL(e.manager_id);


4. Higher Salary

SELECT COUNT(e.employee_id) as `count`
FROM employees as e
WHERE e.salary>
(SELECT AVG(salary) AS 'average_salary' FROM employees);

Exercises:

1.Employee Address:

SELECT e.employee_id,e.job_title,a.address_id,a.address_text
FROM employees AS e
JOIN addresses as a 
ON e.address_id = a.address_id
ORDER BY address_id LIMIT 5;

2. Addresses with Towns:

SELECT e.first_name,e.last_name,t.name_town,a.address_text
FROM employees AS e
JOIN addresses as a 
ON e.address_id = a.address_id
JOIN towns AS t
ON a.town_id = t.town_id
ORDER BY first_name, last_name LIMIT 5;

3. Sales Employee:

SELECT e.employee_id,e.first_name,e.last_name, d.name
FROM employees AS e
JOIN departments as d
ON e.department_id = d.department_id WHERE d.name = 'Sales'
ORDER BY  employee_id DESC 
LIMIT 5;

4.Employee Departments:

SELECT e.employee_id,e.first_name,e.salary, d.name
FROM employees AS e
JOIN departments as d
ON e.department_id = d.department_id WHERE e.salary>15000
ORDER BY  d.department_id DESC 
LIMIT 5;

5.Employees Without Project:

SELECT e.employee_id,e.first_name
FROM employees AS e
LEFT JOIN  employees_projects AS p
ON e.employee_id = p.employee_id
ORDER BY  e.employee_id DESC 
LIMIT 3;

6.Employees Hired After:

SELECT e.first_name, e.last_name,e.hire_date,d.name
FROM employees AS e
JOIN  departments AS d
ON e.employee_id = d.department_id WHERE date(e.hire_date) > '1999-01-01' AND d.name IN ('Sales', 'Finance')
ORDER BY  e.hire_date ;

7.Employees with Project:

SELECT e.employee_id, e.first_name, n.name
FROM employees AS e
JOIN  employees_projects AS p
ON e.employee_id = p.employee_id
JOIN projects AS n
ON p.project_id = n.project_id
WHERE date(n.start_date) > '2002-08-13' AND n.end_date IS NULL
ORDER BY e.first_name,n.name;

8.Employee 24:

SELECT e.employee_id, e.first_name, p.name AS project_name
FROM employees AS e
INNER JOIN employees_projects AS ep
ON e.employee_id = ep.employee_id
LEFT OUTER JOIN projects AS p
ON ep.project_id = p.project_id
AND p.start_date < '20050101' 
WHERE e.employee_id = 24 AND p.name IS NULL;

9. Employee Manager:

SELECT e.employee_id, e.first_name, e.manager_id, m.first_name
FROM employees AS e 
JOIN  employees AS m
ON  e.manager_id =m.employee_id
WHERE e.manager_id IN(7,3)
ORDER BY e.first_name;

10. Employee Summary:

SELECT e.employee_id, e.first_name, m.first_name,d.name
FROM employees AS e 
JOIN  employees AS m
ON  e.manager_id =m.employee_id
JOIN departments AS d
ON e.department_id =d.department_id
ORDER BY e.first_name;

11. Min Average Salary:

SELECT min(avgg)as minimum
FROM (
SELECT AVG(salary) as avgg
FROM employees
GROUP BY department_id
) as average_salary


12. Highest Peaks n Bulgaria:

SELECT c.country_code, m.mountain_range,p.peak_name, p.elevation
FROM mountains_countries AS c
JOIN mountains AS m
ON m.id= c.mountain_id
JOIN peaks AS p
ON m.id = p.mountain_id  WHERE c.country_code = 'BG'
and p.elevation>2835
ORDER BY elevation DESC;

13. Count Mountain Ranges:

SELECT c.country_code, count(m.mountain_range)
FROM countries AS c
  INNER JOIN mountains_countries AS mc
    ON c.country_code = mc.country_code
  INNER JOIN mountains m
    ON mc.mountain_id = m.id
WHERE c.country_name in ('United States', 'Russia', 'Bulgaria')
GROUP BY c.country_code;

14. Countries with Rivers:

SELECT c.country_name, r.river_name
FROM countries AS c
JOIN continents AS con ON c.continent_code = con.continent_code
Left JOIN countries_rivers  AS cr ON c.country_code = cr.country_code
LEFT JOIN rivers AS r
ON cr.river_id = r.id
WHERE con.continent_name = 'Africa'
ORDER BY c.country_name;

15.

SELECT OrderedCurrencies.ContinentCode,
	   OrderedCurrencies.CurrencyCode,
	   OrderedCurrencies.CurrencyUsage
  FROM Continents AS c
  JOIN (
	   SELECT ContinentCode AS [ContinentCode],
	   COUNT(CurrencyCode) AS [CurrencyUsage],
	   CurrencyCode as [CurrencyCode],
	   DENSE_RANK() OVER (PARTITION BY ContinentCode
	                      ORDER BY COUNT(CurrencyCode) DESC
						  ) AS [Rank]
	   FROM Countries
	   GROUP BY ContinentCode, CurrencyCode
	   HAVING COUNT(CurrencyCode) > 1
	   )
	   AS OrderedCurrencies
    ON c.ContinentCode = OrderedCurrencies.ContinentCode
 WHERE OrderedCurrencies.Rank = 1

16. Countries without any Mountains

SELECT count(*) AS res 
FROM(SELECT mc.country_code
FROM  mountains_countries AS mc
RIGHT JOIN countries as c
ON c.country_code = mc.country_code WHERE mc.country_code IS NULL) AS alm;

17. Highest Peak and Longest River by Country

SELECT 
       Sorted.CountryName,
	   MAX(Sorted.PeakElevation) AS HighestPeakElevation,
	   MAX(Sorted.RiverLength) AS LongestRiverLength
  FROM (
         SELECT c.country_name AS CountryName,
         	   p.elevation AS PeakElevation,
         	   r.length AS RiverLength
           FROM countries AS c
         LEFT JOIN mountains_countries AS mc
         ON c.country_code = mc.country_code
         LEFT JOIN peaks AS p
         ON mc.mountain_id = p.mountain_id
         LEFT JOIN countries_rivers AS cr
         ON c.country_code = cr.country_code
         LEFT JOIN rivers AS r
         ON cr.river_id = r.id
        ) AS Sorted
 GROUP BY Sorted.CountryName
 ORDER BY MAX(Sorted.PeakElevation) DESC,
	      MAX(Sorted.RiverLength) DESC,
		  Sorted.CountryName;
